# A simple proxy using a single traefik container.
#
# - Automatic dynamic routing to services
# - Listens on port 80 & 443
# - Redirects port 80 -> 443
# - Secure dashboard
#
# See additional notes at end of file.

version: "3.9"

services:
  traefik:
    image: traefik:v2.8.1
    networks:
      - proxy
    command:
      # Debugging
      # - --api.debug=true
      # - --log.level=DEBUG
      # Listen on http & https
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Enable the docker provider & docker swarm mode
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      # Attach to proxy overlay network
      - --providers.docker.network=proxy
      # Do not expose containers by default
      - --providers.docker.exposedbydefault=false
      # Enable the secure API
      - --api=true
      # TLS - Configure the tls letsencrypt challenge with our custom resolver
      # Replace with your letsencrypt email
      - --certificatesresolvers.leresolver.acme.email=info@frameshift.io
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # Comment out this line after testing to use the production server and obtain a valid certificate
      - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../letsencrypt:/letsencrypt
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # Dashboard
        - "traefik.http.routers.traefik.rule=Host(`traefik.frameshift.io`)"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls.certresolver=leresolver"
        - "traefik.http.routers.traefik.entrypoints=websecure"
        - "traefik.http.routers.traefik.middlewares=authtraefik"
        - "traefik.http.middlewares.authtraefik.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/" # user/password
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

        # Global redirect to https
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

        # Middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"

networks:
  proxy:
    driver: overlay
    name: proxy

# Prerequisites - Must complete before launching stack

# 1. Replace email in config above (info@frameshift.io) to a valid email
# 2. Replace example domain (traefik.frameshift.io)
# 3. Create & encrypt traefik dashboard password

# Note: all dollar signs in the hash need to be doubled for escaping.
# To create user:password pair, it's possible to use this command:
# $ echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g

# 4. Create file to hold letsencrypt certs
# $ mkdir letsencrypt
# $ touch letsencrypt/acme.json
# $ chmod 600 letsencrypt/acme.json

# 5. Launch stack
# $ make deploy-traefik-stack

# 6. Verify dashboard & TLS
# The certificate should be issued by: CN=Fake LE Intermediate X1
# Once everything is working, change to the Let's Encrypt production server: https://acme-v02.api.letsencrypt.org/directory
# Make sure to repeat step 4 above anytime the Let's Encrypt server is changed
