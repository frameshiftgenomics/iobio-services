# Compose file for production: deploy the iobio apps behind traefik
#
# - traefik proxy with dynamic routing & secure dashboard
# - traefik listens on port 80 & 443
# - traefik redirects http -> https
# - traefik handles TLS using Let's Encrypt
# - gene.iobio client app
# - gru.iobio api
#
# See additional notes at end of file

version: "3.7"

services:
  traefik:
    image: traefik:v2.1
    networks:
      - proxy
    command:
      # Debugging
      # - --api.debug=true
      # - --log.level=DEBUG
      # Listen on http & https
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Enable the docker provider
      - --providers.docker=true
      # Attach to proxy overlay network
      - --providers.docker.network=proxy
      # Do not expose containers by default
      - --providers.docker.exposedbydefault=false
      # Enable the secure API
      - --api=true
      # TLS - Configure the tls letsencrypt challenge with our custom resolver
      # Replace with your letsencrypt email
      - --certificatesresolvers.leresolver.acme.email=crab@nebula.org
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # Comment out this line after testing to use the production server and obtain a valid certificate
      # - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.nebula.org`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=nebula_admin:$$apr1$$p6V8SbO.$$aYQWdLeNVDq3pL.rHvC.C0" # user/password
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

      # Global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # Middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
    restart: always

  gene:
    image: nebulagenomics/iobio_gene:latest
    build:
      context: ./gene
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gene.rule=Host(`gene.nebula.org`)"
      - "traefik.http.routers.gene.entrypoints=websecure"
      - "traefik.http.routers.gene.tls=true"
      - "traefik.http.routers.gene.tls.certresolver=leresolver"
      - "traefik.http.services.gene.loadbalancer.server.port=80"
    restart: always

  gru:
    image: nebulagenomics/iobio_gru:latest
    build:
      context: ./gru
    privileged: true
    networks:
      - proxy
    volumes:
      - ./sqlite/data:/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gru.rule=Host(`gene.nebula.org`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.gru.entrypoints=websecure"
      - "traefik.http.routers.gru.tls=true"
      - "traefik.http.routers.gru.tls.certresolver=leresolver"
      - "traefik.http.routers.gru.middlewares=strip-api-prefix,gru-compress"
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.forceslash=false"
      - "traefik.http.middlewares.gru-compress.compress=true"
      - "traefik.http.services.gru.loadbalancer.server.port=9001"
    restart: always

networks:
  proxy:
    driver: bridge
    name: proxy
# Prerequisites - Must complete before launching stack

# 1. Replace email in config above to a valid email
# 2. Replace example domains & docker images
# 3. Create & encrypt traefik dashboard password

# Note: all dollar signs in the hash need to be doubled for escaping.
# To create user:password pair, it's possible to use this command:
# $ echo $(htpasswd -nb user password) | sed -e s/\\$/\\$\\$/g

# 4. Create file to hold letsencrypt certs

# $ mkdir letsencrypt
# $ touch letsencrypt/acme.json
# $ chmod 600 letsencrypt/acme.json

# 5. Launch
# $ docker-compose -f docker-compose-prod.yml up -d

# 6. Verify dashboard & TLS
# The certificate should be issued by: CN=Fake LE Intermediate X1
# Once everything is working, change to the Let's Encrypt production server: https://acme-v02.api.letsencrypt.org/directory
